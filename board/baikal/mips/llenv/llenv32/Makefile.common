#
# Low-level and POST tests.
#
# Copyright (C) 2014 Baikal Electronics.
#
# Author: Alexey Malahov <Alexey.Malahov@baikalelectronics.com>
#
# Description:
#

include ${LLENV32_DIR}/libllenv.config

ifeq (${TEST_ARCH},mips)

CC            = $(CROSS_COMPILE)gcc
LD            = $(CROSS_COMPILE)ld
OBJCOPY       = ${CROSS_COMPILE}objcopy
OBJDUMP       = ${CROSS_COMPILE}objdump
AR	      = $(CROSS_COMPILE)ar
STRIP	      = $(CROSS_COMPILE)strip
OBJCOPY       = $(CROSS_COMPILE)objcopy
SIZE	      = $(CROSS_COMPILE)size
endif

ifeq (${TEST_ARCH},arm)
CC            = $(CROSS_COMPILE64)gcc
LD            = $(CROSS_COMPILE64)ld
OBJCOPY       = ${CROSS_COMPILE64}objcopy
OBJDUMP       = ${CROSS_COMPILE64}objdump
AR            = $(CROSS_COMPILE64)ar
STRIP         = $(CROSS_COMPILE64)strip
OBJCOPY       = $(CROSS_COMPILE64)objcopy
SIZE          = $(CROSS_COMPILE64)size

CC            = $(CROSS_COMPILE)gcc
LD32            = $(CROSS_COMPILE)ld
OBJCOPY32       = ${CROSS_COMPILE}objcopy
OBJDUMP32       = ${CROSS_COMPILE}objdump
AR32            = $(CROSS_COMPILE)ar
STRIP32         = $(CROSS_COMPILE)strip
OBJCOPY32       = $(CROSS_COMPILE)objcopy
SIZE32          = $(CROSS_COMPILE)size

CFLAGS_CONFIG += -DGIC${ARM_GIC}
SFLAGS_CONFIG += -DGIC${ARM_GIC}

endif

# Process variables from TEST_RULES.
CFLAGS_CONFIG += -I ${LLENV32_DIR}/include -I ${LLENV32_DIR}/include/${TEST_ARCH}/
SFLAGS_CONFIG += -I ${LLENV32_DIR}/include -I ${LLENV32_DIR}/include/${TEST_ARCH}/


ifeq (${RUN_SHELL},yes)
CFLAGS_CONFIG += -DRUN_SHELL
SFLAGS_CONFIG += -DRUN_SHELL
endif

ifeq (${RUN_ON_ALL_CORES},yes)
CFLAGS_CONFIG += -DRUN_ON_ALL_CORES
SFLAGS_CONFIG += -DRUN_ON_ALL_CORES
ifdef TEST_SUITE_ON_CORE1
CFLAGS_CONFIG += -DTEST_SUITE_ON_CORE1
SFLAGS_CONFIG += -DTEST_SUITE_ON_CORE1
endif
endif

ifeq (${INVALIDATE_L1_ON_START},yes)
CFLAGS_CONFIG += -DINVALIDATE_L1_ON_START
SFLAGS_CONFIG += -DINVALIDATE_L1_ON_START
endif

ifeq (${INVALIDATE_L2_ON_START},yes)
CFLAGS_CONFIG += -DINVALIDATE_L2_ON_START
SFLAGS_CONFIG += -DINVALIDATE_L2_ON_START
endif

ifeq (${COHERENCE_ENABLE},yes)
CFLAGS_CONFIG += -DCOHERENCE_ENABLE
SFLAGS_CONFIG += -DCOHERENCE_ENABLE
endif

ifeq (${CM2},yes)
CFLAGS_CONFIG += -DUSE_GIC
SFLAGS_CONFIG += -DUSE_GIC
else
CFLAGS_CONFIG += -DNO_CHECK_CPU
SFLAGS_CONFIG += -DNO_CHECK_CPU
endif

ifeq (${MMU_CACHEABLE},yes)
CFLAGS_CONFIG += -DMMU_CACHEABLE
SFLAGS_CONFIG += -DMMU_CACHEABLE
endif

ifeq (${POWER_ON_CORES},yes)
CFLAGS_CONFIG += -DPOWER_ON_CORES
SFLAGS_CONFIG += -DPOWER_ON_CORES
endif

ifeq (${ECC_DBG_ERR},correctable)
CFLAGS_CONFIG += -DECC_DBG_CORR_ERR
SFLAGS_CONFIG += -DECC_DBG_CORR_ERR
endif

ifeq (${ECC_DBG_ERR},uncorrectable)
CFLAGS_CONFIG += -DECC_DBG_UNCORR_ERR
SFLAGS_CONFIG += -DECC_DBG_UNCORR_ERR
endif

ifeq (${INIT_DDR},yes)
CFLAGS_CONFIG += -DINIT_DDR
SFLAGS_CONFIG += -DINIT_DDR
# USE_DDR_SPD = yes
ifeq (${USE_DDR_SPD},yes)
PATH_DDR_SPD = ${LLENV32_DIR}/../ddr
CFLAGS_CONFIG += -DLLENV_SPD_ENABLE -I ${PATH_DDR_SPD}
SFLAGS_CONFIG += -DLLENV_SPD_ENABLE -I ${PATH_DDR_SPD}
endif
ifeq (${UBOOT_I2C_SPD},yes)
CFLAGS_CONFIG += -DUBOOT_I2C_SPD
SFLAGS_CONFIG += -DUBOOT_I2C_SPD
endif
ifeq (${DDR_INIT_FILL},yes)
CFLAGS_CONFIG += -DDDR_INIT_FILL
SFLAGS_CONFIG += -DDDR_INIT_FILL
endif
# ifeq (${GEN_DDR_SPD},yes)
# CFLAGS_CONFIG += -DGEN_DDR_SPD
# SFLAGS_CONFIG += -DGEN_DDR_SPD
# endif
ifeq (${FACTORY_SPD},yes)
CFLAGS_CONFIG += -DFACTORY_SPD
SFLAGS_CONFIG += -DFACTORY_SPD
endif
CFLAGS_CONFIG += -DDDR_SPEED_BIN_${DDR_SPEED_BIN}
SFLAGS_CONFIG += -DDDR_SPEED_BIN_${DDR_SPEED_BIN}
endif

ifeq (${INIT_DDR},yes)
USE_DDR_SPD = yes
else
USE_DDR_SPD = no
endif

ifeq (${DDR_INIT_FILL},yes)
CFLAGS_CONFIG += -DDDR_INIT_FILL
SFLAGS_CONFIG += -DDDR_INIT_FILL
endif

ifeq (${UART_FIFO_ENABLE},yes)
CFLAGS_CONFIG += -DUART_FIFO_ENABLE
SFLAGS_CONFIG += -DUART_FIFO_ENABLE
endif

ifeq (${BROM_HCI_CHECK},yes)
CFLAGS_CONFIG += -DBROM_HCI_CHECK
SFLAGS_CONFIG += -DBROM_HCI_CHECK
endif

ifeq (${BROM_DEBUG},yes)
CFLAGS_CONFIG += -DBROM_DEBUG
SFLAGS_CONFIG += -DBROM_DEBUG
endif

ifeq (${DEBUG},yes)
CFLAGS_CONFIG += -DUART_EXISTS -DDEBUG
SFLAGS_CONFIG += -DUART_EXISTS -DDEBUG
endif

ifeq (${USE_SEMIHOSTING},yes)
CFLAGS_CONFIG += -DUSE_SEMIHOSTING
SFLAGS_CONFIG += -DUSE_SEMIHOSTING
endif

ifeq (${EXC_DEBUG},yes)
CFLAGS_CONFIG += -DEXC_DEBUG
SFLAGS_CONFIG += -DEXC_DEBUG
endif

ifeq (${TLB_DEBUG},yes)
CFLAGS_CONFIG += -DTLB_DEBUG
SFLAGS_CONFIG += -DTLB_DEBUG
endif

ifeq (${INCLUDE_BOOT}, yes)
CFLAGS_CONFIG += -DINCLUDE_BOOT
SFLAGS_CONFIG += -DINCLUDE_BOOT
endif

ifeq (${CPU_SET_FREQ},yes)
CFLAGS_CONFIG += -DCPU_SET_FREQ
CFLAGS_CONFIG += -DCPU_FREQ_NR=${CPU_FREQ_NR}
CFLAGS_CONFIG += -DCPU_FREQ_NF=${CPU_FREQ_NF}
CFLAGS_CONFIG += -DCPU_FREQ_OD=${CPU_FREQ_OD}
SFLAGS_CONFIG += -DCPU_SET_FREQ
SFLAGS_CONFIG += -DCPU_FREQ_NR=${CPU_FREQ_NR}
SFLAGS_CONFIG += -DCPU_FREQ_NF=${CPU_FREQ_NF}
SFLAGS_CONFIG += -DCPU_FREQ_OD=${CPU_FREQ_OD}
endif

ifeq (${BUILD_FOR_BAIKAL_T},yes)
CFLAGS_CONFIG += -DQEMU -DBAIKAL_T
SFLAGS_CONFIG += -DQEMU -DBAIKAL_T
endif

ifeq (${BUILD_FOR_RTL},yes)
CFLAGS_CONFIG += -DRTL -DQEMU
SFLAGS_CONFIG += -DRTL -DQEMU
endif

ifeq (${BUILD_FOR_HAPS},yes)
CFLAGS_CONFIG += -DQEMU -DHAPS
SFLAGS_CONFIG += -DQEMU -DHAPS
endif

ifeq (${BUILD_FOR_QEMU},yes)
CFLAGS_CONFIG += -DQEMU
SFLAGS_CONFIG += -DQEMU
endif

ifeq (${ECC_DDR_ENABLE},yes)
CFLAGS_CONFIG += -DECC_DDR_ENABLE
SFLAGS_CONFIG += -DECC_DDR_ENABLE
endif

ifeq (${SINGLE_RANK_DDR},yes)
CFLAGS_CONFIG += -DSINGLE_RANK_DDR
SFLAGS_CONFIG += -DSINGLE_RANK_DDR
endif

ifeq (${BUILD_FOR_MALTA},yes)
CFLAGS_CONFIG += -DQEMU -DYAMON_MALTA
endif

ifeq (${BUILD_FOR_UBOOT_LIB},yes)
CFLAGS_CONFIG += -fno-common -DUBOOT  -EL -G0 -Os -fpic -mxpa -mabicalls -shared  -fno-builtin
# -mhard-float
SFLAGS_CONFIG += -fno-common -DUBOOT  -EL -G0 -fpic -mxpa -mabicalls -shared  -fno-builtin
endif

ifeq (${BUILD_FOR_UBOOT_FW},yes)
ifeq (${BUILD_FOR_UBOOT_LIB},yes)
$(error BUILD_FOR_UBOOT_FW or BUILD_FOR_UBOOT_LIB should be defined)
endif
CFLAGS_CONFIG += -fno-common -DUBOOT  -EL -G0 -Os -fno-builtin
# -msoft-float
SFLAGS_CONFIG += -fno-common -DUBOOT  -EL -G0 -fno-builtin
endif

ifeq (${BUILD_FOR_FCT},yes)
CFLAGS_CONFIG += -DFCT
endif

ifeq (${BUILD_FOR_FORMULA},yes)
CFLAGS_CONFIG += -DFORMULA
endif

ifeq (${USE_FTLB},yes)
CFLAGS_CONFIG += -DUSE_FTLB
SFLAGS_CONFIG += -DUSE_FTLB
endif

ifeq (${BUILD_FOR_FOUNDATION_MODEL},yes)
CFLAGS_CONFIG += -DFOUNDATION_MODEL
SFLAGS_CONFIG += -DFOUNDATION_MODEL
STACK_BASE        = 0x81000000
MBOX_OFFSET       = 0x1fff8
STACK_OFFSET      = 0xffff0000
FMODEL=~/Foundation_v8pkg/Foundation_v8
endif

ifeq (${PAGE_SIZE},4K)
CFLAGS_CONFIG += -DPAGE_SIZE=0x1000
SFLAGS_CONFIG += -DPAGE_SIZE=0x1000
else ifeq (${PAGE_SIZE},16K)
CFLAGS_CONFIG += -DPAGE_SIZE=0x4000
SFLAGS_CONFIG += -DPAGE_SIZE=0x4000
else ifeq (${PAGE_SIZE},64K)
CFLAGS_CONFIG += -DPAGE_SIZE=0x10000
SFLAGS_CONFIG += -DPAGE_SIZE=0x10000
else ifeq (${PAGE_SIZE},256K)
CFLAGS_CONFIG += -DPAGE_SIZE=0x40000
SFLAGS_CONFIG += -DPAGE_SIZE=0x40000
else ifeq (${PAGE_SIZE},1M)
CFLAGS_CONFIG += -DPAGE_SIZE=0x100000
SFLAGS_CONFIG += -DPAGE_SIZE=0x100000
else ifeq (${PAGE_SIZE},4M)
CFLAGS_CONFIG += -DPAGE_SIZE=0x400000
SFLAGS_CONFIG += -DPAGE_SIZE=0x400000
else ifeq (${PAGE_SIZE},16M)
CFLAGS_CONFIG += -DPAGE_SIZE=0x1000000
SFLAGS_CONFIG += -DPAGE_SIZE=0x1000000
else ifeq (${PAGE_SIZE},64M)
CFLAGS_CONFIG += -DPAGE_SIZE=0x4000000
SFLAGS_CONFIG += -DPAGE_SIZE=0x4000000
else ifeq (${PAGE_SIZE},256M)
CFLAGS_CONFIG += -DPAGE_SIZE=0x10000000
SFLAGS_CONFIG += -DPAGE_SIZE=0x10000000
endif

ifeq (${SIMD_ENABLE},yes)
CFLAGS_CONFIG += -Wa,-mmsa -DSIMD_ENABLE
SFLAGS_CONFIG += -Wa,-mmsa -DSIMD_ENABLE
endif

ifeq (${ARM_GIC},v3)
CFLAGS_CONFIG += -DGICv3
SFLAGS_CONFIG += -DGICv3
else
CFLAGS_CONFIG += -DGICv2
SFLAGS_CONFIG += -DGICv2
endif

ifeq (${HYPERVISOR},yes)
CFLAGS_CONFIG += -DHYPERVISOR
SFLAGS_CONFIG += -DHYPERVISOR
endif




PATH_PAYLOAD = dev/tests/payload
CFLAGS_CONFIG += -I ${PATH_PAYLOAD}
SFLAGS_CONFIG += -I ${PATH_PAYLOAD}
